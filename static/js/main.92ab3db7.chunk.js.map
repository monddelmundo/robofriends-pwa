{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","email","name","id","className","src","alt","CardList","robots","console","log","map","user","i","key","React","memo","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","connect","searchRobots","requestRobots","isPending","dispatch","onSearchChange","event","payload","target","value","onRequestRobots","fetch","then","response","json","data","catch","useState","filteredRobots","setFilteredRobots","a","length","useEffect","componentDidMount","filter","robot","toLowerCase","includes","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initialStateSearch","initialStateRobots","rootReducer","createLogger","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"4QAeeA,EAbF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,KAAMC,EAAS,EAATA,GAE3B,OACE,yBAAKC,UAAU,uDACb,yBAAKC,IAAG,+BAA0BF,EAA1B,YAAwCG,IAAI,WACpD,6BACE,4BAAKJ,GACL,2BAAID,MCYGM,EAlBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAElB,OADAC,QAAQC,IAAI,YAEV,6BACGF,EAAOG,KAAI,SAACC,EAAMC,GACjB,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLV,GAAIK,EAAOK,GAAGV,GACdD,KAAMM,EAAOK,GAAGX,KAChBD,MAAOO,EAAOK,GAAGZ,aCIdc,MAAMC,MAfH,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAGhC,OAFAT,QAAQC,IAAI,eAGV,yBAAKN,UAAU,OACb,2BACEA,UAAU,mCACVe,KAAK,SACLC,YAAY,gBACZC,SAAUH,QCKHI,EAdA,SAACC,GACd,OACE,yBACEC,MAAO,CACLC,UAAW,SACXC,OAAQ,kBACRC,OAAQ,UAGTJ,EAAMK,W,gCCaEC,E,kDApBb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,UAAU,GAHA,E,8DAOIC,EAAOC,GACvBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAOG,KAAKJ,MAAMC,SAChB,iDAEAG,KAAKX,MAAMK,a,GAhBUQ,a,eCIZrB,MAAMC,MALN,WAEb,OADAP,QAAQC,IAAI,UACL,wBAAIN,UAAU,MAAd,kBCoEMiC,mBAhBf,SAAyBP,GACvB,MAAO,CACLb,YAAaa,EAAMQ,aAAarB,YAChCT,OAAQsB,EAAMS,cAAc/B,OAC5BgC,UAAWV,EAAMS,cAAcC,UAC/BR,MAAOF,EAAMS,cAAcP,UAI/B,SAA4BS,GAC1B,MAAO,CACLC,eAAgB,SAACC,GAAD,OAAWF,ECjEU,CACvCtB,KCHiC,sBDIjCyB,QD+DqDD,EAAME,OAAOC,SAChEC,gBAAiB,kBC7DQ,SAACN,GAC5BA,EAAS,CAAEtB,KCNyB,2BDOpC6B,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACLX,EAAS,CACPtB,KCV8B,yBDW9ByB,QAASQ,OAGZC,OAAM,SAACrB,GAAD,OACLS,EAAS,CAAEtB,KCdoB,wBDcmByB,QAASZ,ODkDtCO,CAAcE,OAI1BJ,EA9Df,SAAad,GAAQ,IAAD,EAC0B+B,mBAAS,IADnC,mBACXC,EADW,KACKC,EADL,KAGhBvC,EAKEM,EALFN,YACAyB,EAIEnB,EAJFmB,eACAlC,EAGEe,EAHFf,OACAuC,EAEExB,EAFFwB,gBACAP,EACEjB,EADFiB,UAPgB,4CAelB,sBAAAiB,EAAA,sDACwB,IAAlBjD,EAAOkD,QAAcX,IACrBvC,EAAOkD,OAAS,GAAGF,EAAkBhD,GAF3C,4CAfkB,sBA+BlB,OApBAmD,qBAAU,YAXQ,mCAYhBC,KACC,CAACpD,EAAOkD,SAOXC,qBAAU,WACJnD,EAAOkD,QACTF,EACEhD,EAAOqD,QAAO,SAACC,GAAD,OACZA,EAAM5D,KAAK6D,cAAcC,SAAS/C,EAAY8C,qBAInD,CAAC9C,EAAYyC,SAGTlB,EACL,0CAEA,yBAAKpC,UAAU,MACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWc,aAAcwB,IACzB,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUlC,OAAQ+C,UGrCtBU,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTvB,MAAK,SAAA4B,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBjD,QACf4C,UAAUC,cAAcO,YAI1BzE,QAAQC,IACN,iHAKE+D,GAAUA,EAAOU,UACnBV,EAAOU,SAASN,KAMlBpE,QAAQC,IAAI,sCAGR+D,GAAUA,EAAOW,WACnBX,EAAOW,UAAUP,WAO5BxB,OAAM,SAAArB,GACLvB,QAAQuB,MAAM,4CAA6CA,M,wCC/F3DqD,EAAqB,CACzBpE,YAAa,IAYTqE,EAAqB,CACzB9C,WAAW,EACXhC,OAAQ,GACRwB,MAAO,ICJHuD,GADSC,yBACKC,YAAgB,CAAEnD,aDRV,WAA8C,IAA7CR,EAA4C,uDAApCuD,EAAoBK,EAAgB,uDAAP,GAChE,OAAQA,EAAOvE,MACb,IFP+B,sBEQ7B,OAAO,2BAAKW,GAAZ,IAAmBb,YAAayE,EAAO9C,UACzC,QACE,OAAOd,ICGuCS,cDOvB,WAA8C,IAA7CT,EAA4C,uDAApCwD,EAAoBI,EAAgB,uDAAP,GACjE,OAAQA,EAAOvE,MACb,IFpBkC,yBEqBhC,OAAO,2BAAKW,GAAZ,IAAmBU,WAAW,IAChC,IFrBkC,yBEsBhC,OAAO,2BAAKV,GAAZ,IAAmBtB,OAAQkF,EAAO9C,QAASJ,WAAW,IACxD,IFtBiC,wBEuB/B,OAAO,2BAAKV,GAAZ,IAAmBE,MAAO0D,EAAO9C,QAASJ,WAAW,IACvD,QACE,OAAOV,OCdP6D,EAAQC,YACZL,EAEAM,YAAgBC,MAGlBC,IAASC,OACP,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,OAEFM,SAASC,eAAe,SFHnB,SAAkBzB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIyB,IAAIC,mBAAwBjC,OAAOC,SAASiC,MACpDC,SAAWnC,OAAOC,SAASkC,OAIvC,OAGFnC,OAAOoC,iBAAiB,QAAQ,WAC9B,IAAM/B,EAAK,UAAM4B,mBAAN,sBAEPnC,IAgEV,SAAiCO,EAAOC,GAEtCzB,MAAMwB,EAAO,CACXgC,QAAS,CAAE,iBAAkB,YAE5BvD,MAAK,SAAAC,GAEJ,IAAMuD,EAAcvD,EAASsD,QAAQE,IAAI,gBAEnB,MAApBxD,EAASyD,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5ClC,UAAUC,cAAckC,MAAM5D,MAAK,SAAA4B,GACjCA,EAAaiC,aAAa7D,MAAK,WAC7BkB,OAAOC,SAAS2C,eAKpBxC,EAAgBC,EAAOC,MAG1BpB,OAAM,WACL5C,QAAQC,IACN,oEAvFAsG,CAAwBxC,EAAOC,GAI/BC,UAAUC,cAAckC,MAAM5D,MAAK,WACjCxC,QAAQC,IACN,iHAMJ6D,EAAgBC,EAAOC,OEnB/BE,K","file":"static/js/main.92ab3db7.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Card = ({ email, name, id }) => {\r\n  //tc=text center, dib=div, br=border, pa=padding, ma=margin, br=border radius\r\n  return (\r\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n      <img src={`https://robohash.org/${id}?200x200`} alt=\"robots\" />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({ robots }) => {\r\n  console.log(\"cardList\");\r\n  return (\r\n    <div>\r\n      {robots.map((user, i) => {\r\n        return (\r\n          <Card\r\n            key={i}\r\n            id={robots[i].id}\r\n            name={robots[i].name}\r\n            email={robots[i].email}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nconst SearchBox = ({ searchField, searchChange }) => {\r\n  console.log(\"searchfield\");\r\n  //pa = padding, ba = border all sides, b = border, bg = background\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input\r\n        className=\"pa3 ba b--green bg-lightest-blue\"\r\n        type=\"search\"\r\n        placeholder=\"Search Robots\"\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(SearchBox);\r\n","import React from \"react\";\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        overflowY: \"scroll\",\r\n        border: \"5px solid black\",\r\n        height: \"600px\",\r\n      }}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","import { Component } from \"react\";\r\nimport React from \"react\";\r\n\r\nclass ErrorBoundry extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      hasError: false,\r\n    };\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true });\r\n  }\r\n\r\n  render() {\r\n    return this.state.hasError ? (\r\n      <h1>That is not good!</h1>\r\n    ) : (\r\n      this.props.children\r\n    );\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;\r\n","import React from \"react\";\r\n\r\nconst Header = () => {\r\n  console.log(\"Header\");\r\n  return <h1 className=\"f2\">Robofriends</h1>;\r\n};\r\n\r\nexport default React.memo(Header);\r\n","import React, { useEffect, useState } from \"react\";\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport ErrorBoundry from \"../components/ErrorBoundry\";\r\nimport \"../containers/App.css\";\r\nimport { setSearchField, requestRobots } from \"../actions\";\r\nimport { connect } from \"react-redux\";\r\nimport Header from \"../components/Header\";\r\n\r\nfunction App(props) {\r\n  const [filteredRobots, setFilteredRobots] = useState([]);\r\n  const {\r\n    searchField,\r\n    onSearchChange,\r\n    robots,\r\n    onRequestRobots,\r\n    isPending,\r\n  } = props;\r\n\r\n  //componentDidMount\r\n  useEffect(() => {\r\n    componentDidMount();\r\n  }, [robots.length]); //notice the empty array here\r\n\r\n  async function componentDidMount() {\r\n    if (robots.length === 0) onRequestRobots();\r\n    if (robots.length > 0) setFilteredRobots(robots);\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (robots.length) {\r\n      setFilteredRobots(\r\n        robots.filter((robot) =>\r\n          robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n        )\r\n      );\r\n    }\r\n  }, [searchField.length]);\r\n\r\n  //tc = text center\r\n  return isPending ? (\r\n    <h1>Loading...</h1>\r\n  ) : (\r\n    <div className=\"tc\">\r\n      <Header />\r\n      <SearchBox searchChange={onSearchChange} />\r\n      <Scroll>\r\n        <ErrorBoundry>\r\n          <CardList robots={filteredRobots} />\r\n        </ErrorBoundry>\r\n      </Scroll>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => requestRobots(dispatch),\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import * as constants from \"./constants\";\r\n\r\nexport const setSearchField = (text) => ({\r\n  type: constants.CHANGE_SEARCH_FIELD,\r\n  payload: text,\r\n});\r\n\r\nexport const requestRobots = (dispatch) => {\r\n  dispatch({ type: constants.REQUEST_ROBOTS_PENDING });\r\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      dispatch({\r\n        type: constants.REQUEST_ROBOTS_SUCCESS,\r\n        payload: data,\r\n      });\r\n    })\r\n    .catch((error) =>\r\n      dispatch({ type: constants.REQUEST_ROBOTS_FAILED, payload: error })\r\n    );\r\n};\r\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\r\n\r\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\r\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\r\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import * as constants from \"./constants\";\r\nconst initialStateSearch = {\r\n  searchField: \"\",\r\n};\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n  switch (action.type) {\r\n    case constants.CHANGE_SEARCH_FIELD:\r\n      return { ...state, searchField: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: \"\",\r\n};\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n  switch (action.type) {\r\n    case constants.REQUEST_ROBOTS_PENDING:\r\n      return { ...state, isPending: true };\r\n    case constants.REQUEST_ROBOTS_SUCCESS:\r\n      return { ...state, robots: action.payload, isPending: false };\r\n    case constants.REQUEST_ROBOTS_FAILED:\r\n      return { ...state, error: action.payload, isPending: false };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./containers/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"tachyons\";\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport { createLogger } from \"redux-logger\";\r\nimport { searchRobots, requestRobots } from \"./reducers\";\r\n\r\nconst logger = createLogger();\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  //applyMiddleware(thunkMiddleware, logger)\r\n  applyMiddleware(thunkMiddleware)\r\n);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n//serviceWorker.unregister();\r\n"],"sourceRoot":""}